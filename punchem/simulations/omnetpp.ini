[General]
network = Network
#sim-time-limit = 1000s
#warmup-period = 0s
debug-on-errors = true

#Player
#*.player.recover_rate_x = ${0,50,100}

# RNGs
num-rngs = 4
seed-set = ${repetition}
**.minion.rng-0 = 0
**.minion.rng-1 = 1
**.boss.rng-0 = 2
**.boss.rng-1 = 3


#-------------------------------------------------
#				EXAMPLE THROUGHPUT
#		plot made by using excel. on the x axis
#		there are the results and on the y axis 
#		there is the corresponding inter-arrival 
#		time selected.
#
#-------------------------------------------------
[Config Example_GameMode_Easy]
sim-time-limit = 1000s
#warmup-period = 0s
repeat = 5


# Minion
**.minion.arrival_distribution = 0
**.minion.service_distribution = 0
*.minion.arrival_mean = 2
*.minion.service_mean = 1

# Boss
**.boss.arrival_distribution = 0
**.boss.service_distribution = 0
*.boss.arrival_mean = ${05,10,15,20}
*.boss.service_mean = 5

#Player
*.player.recover_rate_x = 100


#-------------------------------------------------
#				DEBUGGING
#-------------------------------------------------
[Config Degugging]
sim-time-limit = 1000s
#warmup-period = 500s

repeat = 1

# Minion
*.minion.arrival_distribution = 0
*.minion.service_distribution = 0
*.minion.arrival_mean = 3
*.minion.service_mean = 0.5

# Boss
*.boss.arrival_distribution = 0
*.boss.service_distribution = 0
*.boss.arrival_mean = 10
*.boss.service_mean = 5


#Player
*.player.recover_rate_x = ${-100,0,25,99,100,150}


#----------------------------------------------------
#				VERIFICATION
#----------------------------------------------------

#----------------------------------#
#----CONSTANT DISTRIBUTION TEST----#
#----------------------------------#
[Config Constant_test]
sim-time-limit = 1000s
repeat = 1

*.minion.arrival_distribution = 1 # 1 = constant arrival/service time
*.minion.service_distribution = 1
*.boss.service_distribution = 1
*.boss.arrival_distribution = 1


[Config Constant_test_fights] #test correctness of fights (if the defeated times are correct) : TEST OK
extends = Constant_test
*.minion.arrival_mean = 2
*.minion.service_mean = 1

*.boss.arrival_mean = 7
*.boss.service_mean = 3


[Config Constant_test_recovery] #test correctness of minion recovery (if the recovery computation is correct and the minion is queued up)
extends = Constant_test
*.minion.arrival_mean = 0.6
*.minion.service_mean = 3

*.boss.arrival_mean = 5
*.boss.service_mean = 4

#Player
*.player.recover_rate_x = ${0,50,100}


#-----------------------#
#----DEGENERACY TEST----#
#-----------------------#
[Config Degeneracy_test] #made by using Qtenv: TEST OK
sim-time-limit = 1000s
repeat = 1
*.minion.arrival_distribution = 1 # 1 = constant time
*.minion.service_distribution = 1

*.boss.arrival_distribution = 1
*.boss.service_distribution = 1

*.boss.arrival_mean = 0
*.boss.service_mean = 0
*.minion.arrival_mean = 0
*.minion.service_mean = 0


[Config Degeneracy_test_bosses]
extends = Degeneracy_test
*.boss.arrival_mean = ${0,1}
*.boss.service_mean = ${0,1}

[Config Degeneracy_test_minions]
extends = Degeneracy_test
*.minion.arrival_mean = ${0,1}
*.minion.service_mean = ${0,1}


#------------------------#
#----CONSISTENCY TEST----#
#------------------------#

#CONSISTENCY TEST - BOSSES
[Config Consistency_test_bosses]
sim-time-limit = 1000s
**.minion.arrival_distribution = 0 # 0 = exponential distribution
**.minion.service_distribution = 0
*.minion.arrival_mean = 10	#fixed
*.minion.service_mean = 1	#fixed
**.boss.arrival_distribution = 0
**.boss.service_distribution = 0


#Consistency for number of bosses defeated
[Config Consistency_test_bosses_defeated]
extends = Consistency_test_bosses
repeat = 100
*.boss.arrival_mean = 1
*.boss.service_mean = ${2,3}	#higher life, less bosses defeated by the player: TEST OK


#Consistency for mean response time
[Config Consistency_test_bosses_response_time]
extends = Consistency_test_bosses
repeat = 1
*.boss.arrival_mean = 10
*.boss.service_mean = ${1,2}	#higher arrival time, the response time is almost equal to the service time: TEST OK


#Consistency for mean waiting time
[Config Consistency_test_bosses_waiting_time]
extends = Consistency_test_bosses
sim-time-limit = 2000s
repeat = 10
*.boss.arrival_mean = 10
*.boss.service_mean = ${1,2,15} #service time < arrival time, then the waiting time is 0 or almost 0 (and viceversa): TEST OK



#CONSISTENCY TEST - MINIONS
[Config Consistency_test_minions]
sim-time-limit = 1000s
**.minion.arrival_distribution = 0 # 0 = exponential distribution
**.minion.service_distribution = 0
**.boss.arrival_distribution = 1
**.boss.service_distribution = 1
*.boss.arrival_mean = 1500 #fixed (no bosses in the game)
*.boss.service_mean = 0.1  #fixed

#Consistency for number of minions defeated
[Config Consistency_test_minions_defeated]
extends = Consistency_test_minions
repeat = 1 #todo with more replicas
*.minion.arrival_mean = 1
*.minion.service_mean = ${2,3}



#Consistency for mean waiting time
[Config Consistency_test_minions_waiting_time]
extends = Consistency_test_minions
repeat = 1 #todo with more replicas
*.minion.arrival_mean = 10
*.minion.service_mean = ${1,2,15}


#-----------------------#
#----CONTINUITY TEST----#
#-----------------------#
[Config Continuity_test]
sim-time-limit = 2000s

**.minion.arrival_distribution = 0
**.minion.service_distribution = 0
**.boss.arrival_distribution = 0
**.boss.service_distribution = 0


[Config Continuity_test_mean_response_time] #TEST OK
extends = Continuity_test
repeat = 50
*.minion.arrival_mean = 2
*.minion.service_mean = 1

*.boss.arrival_mean = 10
*.boss.service_mean = ${5,5.1,5.2} #slightly increasing the mean service time it also increase slightly the mean response time

*.player.recover_rate_x = 100


#--------------------------#
#----MONOTONICITY  TEST----#
#--------------------------#
[Config Monotonicity_test_recover_rate]
extends = Continuity_test
repeat = 100
*.minion.arrival_mean = 2
*.minion.service_mean = 1.5

*.boss.arrival_mean = 2.5	#a boss arrives just after a minion, in order to make the test with a lot of minions recovered
*.boss.service_mean = 0.5

*.player.recover_rate_x = ${0,25,50,75,100} #more % of the recover rate a minion gain, more response time and waiting time a minion have





#----------------------------------------------#
#----AGAINST THEORETICAL MODEL (M/M/1 SYSTEM)----#
#----------------------------------------------#




#----------------------------------------------------
#				CALIBRATION
#----------------------------------------------------


#--------------------------------#
#-----WARM-UP TIME ANALYSIS------#
#--------------------------------#
[Config warm_up_time] #CALIBRATION OK, WARM-UP TIME = 350s
sim-time-limit = 2500s
warmup-period = 350s #different test (0,350)
repeat = 50

**.minion.arrival_distribution = 0
**.minion.service_distribution = 0
**.boss.arrival_distribution = 0
**.boss.service_distribution = 0

*.minion.arrival_mean = 0
*.minion.service_mean = 0

*.boss.arrival_mean = 10
*.boss.service_mean = 3



#--------------------------------#
#----SIMULATION TIME ANALYSIS----#
#--------------------------------#
[Config simulation_time] #CALIBRATION OK, SIMULATION TIME = 2500s
sim-time-limit = 5000s
warmup-period = 350s 
repeat = 3

**.minion.arrival_distribution = 0
**.minion.service_distribution = 0
**.boss.arrival_distribution = 0
**.boss.service_distribution = 0

*.minion.arrival_mean = 0
*.minion.service_mean = 0

*.boss.arrival_mean = 10
*.boss.service_mean = 3



#--------------------------------#
#-----FACTORS CALIBRATION--------#
#--------------------------------#
[Config factors_calibration] #OK WITH 30 REPETITIONS
sim-time-limit = 2500s
warmup-period = 350s
repeat = 30
# Minion
**.minion.arrival_distribution = 0
**.minion.service_distribution = 0
# Boss
**.boss.arrival_distribution = 0
**.boss.service_distribution = 0



[Config factors_calibration_bosses] #OK
extends = factors_calibration

*.minion.arrival_mean = 2
*.minion.service_mean = 1

*.boss.arrival_mean = 20
*.boss.service_mean = ${1,3,5,7,10,12,15,20,25,30,50}

*.player.recover_rate_x = 100


[Config factors_calibration_minions] #OK
extends = factors_calibration

*.minion.arrival_mean = 20 #tested with 5 and 20 ${5,20}
*.minion.service_mean = ${1,2,3,5,7,10,12,15,20}

*.boss.arrival_mean = 20
*.boss.service_mean = 3

*.player.recover_rate_x = 100


[Config factors_calibration_recover_rate] #OK
extends = factors_calibration
repeat = 50  #tested with 30 and 50

*.minion.arrival_mean = 5
*.minion.service_mean = 2

*.boss.arrival_mean = 10
*.boss.service_mean = 3

*.player.recover_rate_x = ${0,25,50,75,100}


[Config factors_calibration_range_test] #TO TEST
extends = factors_calibration
repeat = 20

*.boss.arrival_mean = 30
*.boss.service_mean = ${5,10,15,20}

*.minion.arrival_mean = 5
*.minion.service_mean = ${1,3,5}




#----------------------------------------------------
#				2KR ANALYSIS
#----------------------------------------------------
[Config analysis_2kr] 
sim-time-limit = 2500s
warmup-period = 350s
repeat = 5
# Minion
**.minion.arrival_distribution = 0
**.minion.service_distribution = 0
# Boss
**.boss.arrival_distribution = 0
**.boss.service_distribution = 0



#2KR EASY GAME MODE
[Config analysis_2kr_easy_game_mode]
extends = analysis_2kr

*.boss.arrival_mean = ${20,30} #factor A
*.boss.service_mean = ${5,7.5} #factor B

*.minion.arrival_mean = ${10,15} #factor C
*.minion.service_mean = ${1,3.5} #factor D

*.player.recover_rate_x = ${0,100} #factor E



#2KR HARD GAME MODE
[Config analysis_2kr_hard_game_mode]
extends = analysis_2kr

*.boss.arrival_mean = ${20,30} #factor A
*.boss.service_mean = ${7.5,10} #factor B

*.minion.arrival_mean = ${10,15} #factor C
*.minion.service_mean = ${3.5,7} #factor D

*.player.recover_rate_x = ${0,100} #factor E
 




#----------------------------------------------------
#				SIMULATION
#----------------------------------------------------






