[General]
network = Network
#sim-time-limit = 1000s
#warmup-period = 0s
debug-on-errors = true

#Player
#*.player.recover_rate_x = ${0,50,100}

# RNGs
num-rngs = 4
seed-set = ${repetition}
**.minion.rng-0 = 0
**.minion.rng-1 = 1
**.boss.rng-0 = 2
**.boss.rng-1 = 3


#-------------------------------------------------
#				EXAMPLE THROUGHPUT
#		plot made by using excel. on the x axis
#		there are the results and on the y axis 
#		there is the corresponding inter-arrival 
#		time selected.
#
#-------------------------------------------------
[Config Example_GameMode_Easy]
sim-time-limit = 1000s
#warmup-period = 0s
repeat = 5


# Minion
**.minion.arrival_distribution = 0
**.minion.service_distribution = 0
*.minion.arrival_mean = 2
*.minion.service_mean = 1

# Boss
**.boss.arrival_distribution = 0
**.boss.service_distribution = 0
*.boss.arrival_mean = ${05,10,15,20}
*.boss.service_mean = 5

#Player
*.player.recover_rate_x = 100


#-------------------------------------------------
#				DEBUGGING
#-------------------------------------------------
[Config Degugging]
sim-time-limit = 1000s
#warmup-period = 500s

repeat = 1

# Minion
*.minion.arrival_distribution = 0
*.minion.service_distribution = 0
*.minion.arrival_mean = 3
*.minion.service_mean = 0.5

# Boss
*.boss.arrival_distribution = 0
*.boss.service_distribution = 0
*.boss.arrival_mean = 10
*.boss.service_mean = 5


#Player
*.player.recover_rate_x = ${-100,0,25,99,100,150}


#----------------------------------------------------
#				VERIFICATION
#----------------------------------------------------

#----------------------------------#
#----CONSTANT DISTRIBUTION TEST----#
#----------------------------------#
[Config Constant_test]
sim-time-limit = 1000s
repeat = 1

*.minion.arrival_distribution = 1 # 1 = constant arrival/service time
*.minion.service_distribution = 1
*.boss.service_distribution = 1
*.boss.arrival_distribution = 1


[Config Constant_test_easy_game_mode] #no minion recover, low minion/boss service/arrival ratio
extends = Constant_test
*.minion.arrival_mean = 5
*.minion.service_mean = 2

*.boss.arrival_mean = 10
*.boss.service_mean = 3

*.player.recover_rate_x = 0


[Config Constant_test_medium_game_mode] #50% minion recover rate, medium minion/boss service/arrival ratio
extends = Constant_test
*.minion.arrival_mean = 1
*.minion.service_mean = 2

*.boss.arrival_mean = 3
*.boss.service_mean = 3

#Player
*.player.recover_rate_x = 50


[Config Constant_test_hard_game_mode] #100% minion recover rate, high minion/boss service/arrival ratio
extends = Constant_test
*.minion.arrival_mean = 0.5
*.minion.service_mean = 2

*.boss.arrival_mean = 5
*.boss.service_mean = 10

*.player.recover_rate_x = 100


#-----------------------#
#----DEGENERACY TEST----#
#-----------------------#
[Config Degeneracy_test]
sim-time-limit = 1000s
repeat = 1

# Minion
*.minion.arrival_distribution = 0 # 0 = exponential distribution
*.minion.service_distribution = 0
*.minion.arrival_mean = 0
*.minion.service_mean = 0

# Boss
*.boss.arrival_distribution = 0
*.boss.service_distribution = 0
*.boss.arrival_mean = 0
*.boss.service_mean = 0


#------------------------#
#----CONSISTENCY TEST----#
#------------------------#

#CONSISTENCY TEST - BOSSES
[Config Consistency_test_bosses]
sim-time-limit = 1000s
**.minion.arrival_distribution = 0 # 0 = exponential distribution
**.minion.service_distribution = 0
*.minion.arrival_mean = 10	#fixed
*.minion.service_mean = 1	#fixed
**.boss.arrival_distribution = 0
**.boss.service_distribution = 0


#Consistency for number of bosses defeated
[Config Consistency_test_bosses_defeated]
extends = Consistency_test_bosses
repeat = 100
*.boss.arrival_mean = 1
*.boss.service_mean = ${2,3}	#higher life, less bosses defeated by the player: TEST OK


#Consistency for mean response time
[Config Consistency_test_bosses_response_time]
extends = Consistency_test_bosses
repeat = 1
*.boss.arrival_mean = 10
*.boss.service_mean = ${1,2}	#higher arrival time, the response time is almost equal to the service time: TEST OK


#Consistency for mean waiting time
[Config Consistency_test_bosses_waiting_time]
extends = Consistency_test_bosses
repeat = 10
*.boss.arrival_mean = 10
*.boss.service_mean = ${0.1,2,12} #service time < arrival time, then the waiting time is 0 or almost 0 (and viceversa): TEST OK



#CONSISTENCY TEST - MINIONS
[Config Consistency_test_minions]
sim-time-limit = 1000s
**.minion.arrival_distribution = 0 # 0 = exponential distribution
**.minion.service_distribution = 0
**.boss.arrival_distribution = 1
**.boss.service_distribution = 1
*.boss.arrival_mean = 1500 #fixed (no bosses in the game)
*.boss.service_mean = 0.1  #fixed

#Consistency for number of minions defeated
[Config Consistency_test_minions_defeated]
extends = Consistency_test_minions
repeat = 1 #todo with more replicas
*.minion.arrival_mean = 1
*.minion.service_mean = ${2,3}


#Consistency for mean response time
[Config Consistency_test_minions_response_time]
extends = Consistency_test_minions
repeat = 1 #todo with more replicas
*.minion.arrival_mean = 10
*.minion.service_mean = ${1,2}



#Consistency for mean waiting time
[Config Consistency_test_minions_waiting_time]
extends = Consistency_test_minions
repeat = 1 #todo with more replicas
*.minion.arrival_mean = 10
*.minion.service_mean = ${2,12}



#CONSISTENCY TEST - PLAYER (RECOVER RATE)
[Config Consistency_test_player]
sim-time-limit = 1000s
repeat = 1 #todo with more replicas

#minion and boss parameters are fixed
**.minion.arrival_distribution = 0
**.minion.service_distribution = 0
*.minion.arrival_mean = 2
*.minion.service_mean = 1.5

**.boss.arrival_distribution = 0
**.boss.service_distribution = 0
*.boss.arrival_mean = 2.5	#a boss arrives just after a minion, in order to make the test with a lot of minions recovered
*.boss.service_mean = 0.5

[Config Consistency_test_player_recover_rate]
extends = Consistency_test_player
*.player.recover_rate_x = ${0,50,100} #more % of the recover rate a minion gain, more response time and waiting time a minion have


#-----------------------#
#----CONTINUITY TEST----#
#-----------------------#
[Config Continuity_test_bosses]
sim-time-limit = 1000s
repeat = 1

**.minion.arrival_distribution = 0
**.minion.service_distribution = 0
*.minion.arrival_mean = 2
*.minion.service_mean = 1

**.boss.arrival_distribution = 0
**.boss.service_distribution = 0
*.boss.arrival_mean = 10
*.boss.service_mean = ${5,5.1,5.2}

*.player.recover_rate_x = 100


#--------------------------#
#----MONOTONICITY  TEST----#
#--------------------------#


#----------------------------------------------#
#----AGAINST THEORETICAL MODEL (MM1 SYSTEM)----#
#----------------------------------------------#




#----------------------------------------------------
#				SIMULATION
#----------------------------------------------------


#--------------------------------#
#-----WARM-UP TIME ANALYSIS------#
#--------------------------------#


#--------------------------------#
#----SIMULATION TIME ANALYSIS----#
#--------------------------------#






